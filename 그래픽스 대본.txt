팀 구성원 및 역활: 적당히 설명 ㄲㄲ

제작과정: 전체적인 모습을 보여주고 그 후 세부적인 모습을 보여주면서 사진으로 
이렇게 했다고 말하자

 그리고 저희 프로젝트에서 openGL로 시즈탱크를 구현할 수 있도록 하는 시스템에
대하여 간단하게 설명드리겠습니다. 우선 모델 불러오기 과정을 살펴보면 Learn OpenGL
을 참고하며 Assimp, stb_image등 오픈소스를 사용하여 추가적으로 필요한 부분은 저희
가 직접 구현하였습니다. 모델을 불러오는 소스코드의 클래스 구조도를 살펴보면 해당 
구조로 표현할 수 있습니다. 각각의 클래스의 헤더파일을 살펴봐서 어떤 역활을 하는지
설명드리겠습니다. 
 우선Animator에 대해 설명드리겠습니다.  Animation의 Type을 설정하는 역할로
 Animation array를 보유하여 현재 재생할 애니메이션을 설정해주는 역활을 합니다
소스코드를 보시면 Animation array를 이중 포인터로 구현하고, 타입을 설정하는 변수가
보이고 애니메이션 타입을 반환해주는 인라인 함수가 보입니다. 
 다음으로는 Animation Class로 간단하게 설명하면 다수의 모델을 가지고 있으며 
해당 frame의 모델을 불러오는 역활을 합니다. 코드를 보시면 마찬가지로 모델 클래스를
이중 포인터로 설정하였고 그 외의 애니메이션을 재생하기 위한 변수들을 설정하였습
니다. 그리고 애니메이션의 실행하거나 멈추기 위한 맴버함수들을 볼수 있습니다.
  다음으로는 Model Class로 이 클래스는 다수의 Mesh를 가지고 있으며, Mesh의 부모역활
로 모든 Mesh를 그리는 역활을 합니다. 소스코드를 보면 텍스쳐의 경로를 설정하는 함수
가 존재하고 Mesh와 관련된 변수들이 설정되어 있습니다. 그리고 나중에 설명하겠지만
Shader로 Mesh를 그리는 함수도 존재합니다.
 다음으로는 Mesh클래스인데요 Mesh클래스에는 정점 데이터인 Vertices, 그리는 순서를
정해주는 데이터인 indices, Texture파일의 주소인 textures를 가지고 있습니다. 여기서
Vertices(정점좌표를)를 더 자세히 파고들면 position, Normal vector, TexCoordS등이 더
있습니다.
 다음은 Transform Class인데요 이 클래스는 중요한 3가지 기능이 있는데요 바로 position
의 결정, rotation의 결정(오일거 각도관점에서), scale결정하는 기능을 가지고 있습니다.
해당 소스코드를 보면 position, rotation, scale vec3이 보일 것 입니다. 아래의 인라인
함수들은 position, rotation, scale을 설정하거나 더하는 함수들입니다. 또한 여기서(Transform)
가장 중요한 기능이 있는데 model과 meshsms Transform을 가지고 있으며, 
Transform클래스에는  행렬(Matrix)로 반환하는 함수가 존재합니다.또한 아까 설명하지
않았던 Shader 클래스가 있는데  Shade 클래스는는 그래픽 카드에서 작동하는
프로그램의 랜더링 방법을 정하는 방법이 있는 클래스로  Transform에서 
매트릭스를 가져오면  쉐이더에서 가져온 매트릭스를 할당해서 model클래스에서 
최종적으로 Mesh를 그리게 됩니다.(mesh에서 shader 설명 ㄱㄱ),(model에서 draw설명)
카메라는 그냥 읽어버리삼 설명
무한궤도가 굴러가고 있는 것 처럼 보이는 이유는 무한 궤도에 해당하나의 mesh를 
불러와 해당 TexCoord를 실시간 텍스쳐 매핑 수정하고 있기 때문입니다.


 


 